library(swirl)
swirl()
1:20
pi:10
15:2
15:1
`:`
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Andres")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c("X","Y","Z"), collapse="")
paste(1:3, c("X","Y","Z"), collapse="")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
my_sum <- sum(my_na)
sum(my_na)
my_data
0/0
Inf - Inf
installed.packages()
probability
totalCards <- choose(52,10)
queens <- choose(4,1)
threeFives <- choose(4,3)
remainingCards <- choose(44, 6)
playerHand <- queens * threeFives * remainingCards
probability <- playerHand/totalCards
probability
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[3, 5, 7])
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[c(-2, 10)]
x[-c(-2, 10)]
x[-c(2, 10)]
elements <- c(foo = 11, bar =  2, norf = NA)
vect <- c(foo = 11, bar =  2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
View(my_vector)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- (data = 1:20, nrow = 4, ncol = 5)
my_matrix2 <- (data = c(1:20), nrow = 4, ncol = 5)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(my_matrix, patients)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
View(my_data)
cnames <- c("patient", "age", "weight","bp", "rating", "test")
?colnames
colnames(my_data, prefix = cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
getwd()
setwd("C:/Users/Andres/Documents/CS_412/Project1/")
getwd()
library(ggplot2)
library(usmap)
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
generations <- read.csv("annual_generation_state.csv", header=TRUE, sep = ",")
class(generations)
generations$STATE <- toupper(generations$STATE)
generations$GENERATION..Megawatthours.<- gsub(',', '', generations$GENERATION..Megawatthours.)
generations$GENERATION..Megawatthours. <- as.numeric(generations$GENERATION..Megawatthours.)
generations$STATE <- as.factor(generations$STATE)
generations$TYPE.OF.PRODUCER <- as.factor(generations$TYPE.OF.PRODUCER)
generations$ENERGY.SOURCE <- as.factor(generations$ENERGY.SOURCE)
newGenerations <- subset(generations, generations$GENERATION..Megawatthours. >= 0 &
generations$ENERGY.SOURCE != "Other" &
generations$ENERGY.SOURCE != "Other Gases" &
generations$ENERGY.SOURCE != "Other Biomass" &
generations$ENERGY.SOURCE != "Pumped Storage" &
generations$STATE != "  ")
#removes any unused factors such as "  " in STATE or "Other" in ENERGY.SOURCE
newGenerations$STATE <- factor(newGenerations$STATE)
newGenerations$ENERGY.SOURCE <- factor(newGenerations$ENERGY.SOURCE)
#rename Energy Sources to something more compact
levels(newGenerations$ENERGY.SOURCE)[levels(newGenerations$ENERGY.SOURCE)=="Wood and Wood Derived Fuels"] <- "Wood"
levels(newGenerations$ENERGY.SOURCE)[levels(newGenerations$ENERGY.SOURCE)=="Hydroelectric Conventional"] <- "Hydro"
levels(newGenerations$ENERGY.SOURCE)[levels(newGenerations$ENERGY.SOURCE)=="Solar Thermal and Photovoltaic"] <- "Solar"
levels(newGenerations$ENERGY.SOURCE)
AKData <- subset(newGenerations, newGenerations$STATE == "AK")
ggplot(AKData, aes(x=YEAR, y=GENERATION..Megawatthours.)) + geom_col(aes(fill=ENERGY.SOURCE))
subset(AKData, AKData$ENERGY.SOURCE != "Total")
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"), aes(x=YEAR, y=GENERATION..Megawatthours.)) + geom_col(aes(fill=ENERGY.SOURCE))
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"),
aes(x=YEAR, y=GENERATION..Megawatthours.,fill=ENERGY.SOURCE)) + geom_bar(position="stack")
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"),
aes(x=YEAR, y=GENERATION..Megawatthours.,fill=ENERGY.SOURCE)) + geom_bar(position="stack", stat="identity")
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"),
aes(x=YEAR, y=GENERATION..Megawatthours.,fill=ENERGY.SOURCE)) + geom_bar(position="fill", stat="identity")
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"),
aes(x=YEAR, y=GENERATION..Megawatthours.,fill=ENERGY.SOURCE)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = c("Coal" = "#000000",
"Hydro" = "#56B4E9"))
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"),
aes(x=YEAR, y=GENERATION..Megawatthours.,fill=ENERGY.SOURCE)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = cbPalette)
colorBlindPalette <- c("Coal" = "#000000",
"Geothermal" = "#E69F00",
"Hydro" = "#56B4E9",
"Natural Gas" = "#0072B2",
"Nuclear" = "#CC79A7",
"Petroleum" = "#D55E00",
"Solar" = "#F0E442",
"Wind" = "#999999",
"Wood" = "#009E73")
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"),
aes(x=YEAR, y=GENERATION..Megawatthours.,fill=ENERGY.SOURCE)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = colorBlindPalette)
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"),
aes(x=YEAR, y=GENERATION..Megawatthours.,fill=ENERGY.SOURCE)) +
geom_bar(position="fill", stat="identity") +
scale_fill_manual(values = colorBlindPalette)
?lappy
?lapply
shiny::runApp('~/CS_412/evlWeatherForR')
runApp()
runApp('~/CS_412/evlWeatherForR')
runApp()
runApp()
runApp()
runApp()
runApp('~/CS_412/evlWeatherForR')
allStatesAbb2 <- sort(c(state.abb = state.name, "DC" = "Washington DC", "US-TOTAL" = "Total US"))
runApp()
runApp()
runApp()
runApp()
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"),
aes(x=YEAR, y=GENERATION..Megawatthours.,group=AKData$ENERGY.SOURCE, color=colorBlindPalette)) +
geom_line()
ggplot(AKData,
aes(x=YEAR, y=GENERATION..Megawatthours.,group=AKData$ENERGY.SOURCE, color=colorBlindPalette)) +
geom_line()
ggplot(AKData,
aes(x=YEAR, y=GENERATION..Megawatthours.,group=ENERGY.SOURCE, color=colorBlindPalette)) +
geom_line()
ggplot(AKData,
aes(x=YEAR, y=GENERATION..Megawatthours.,group=ENERGY.SOURCE, color=colorBlindPalette)) +
geom_line()
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"),
aes(x=YEAR, y=GENERATION..Megawatthours.,group=ENERGY.SOURCE, color=colorBlindPalette)) +
geom_line(aes(y=ENERGY.SOURCE))
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"),
aes(x=YEAR, y=GENERATION..Megawatthours.)) +
geom_line(aes(y=ENERGY.SOURCE))
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"),
aes(x=YEAR, y=GENERATION..Megawatthours.)) +
geom_line(aes(y=ENERGY.SOURCE$Coal))
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"),
aes(x=YEAR, y=GENERATION..Megawatthours.)) +
geom_line(aes(y=ENERGY.SOURCE["Coal"]))
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"),
aes(x=YEAR, y=GENERATION..Megawatthours.)) +
geom_line(aes(y="Coal"))
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"),
aes(x=YEAR, y=GENERATION..Megawatthours.)) +
geom_line(aes(y=(ENERGY.SOURCE == "Coal")))
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"),
aes(x=YEAR, y=GENERATION..Megawatthours.)) +
geom_line(aes(y=(ENERGY.SOURCE["Coal"])))
clear()
clear
ggplot(subset(AKData, AKData$ENERGY.SOURCE != "Total"),
aes(x=YEAR, y=GENERATION..Megawatthours.)) +
geom_line()
runApp()
install.packages("usdata")
runApp()
library(usdata)
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(AKData,
aes(x=YEAR, y=GENERATION..Megawatthours.,fill=ENERGY.SOURCE)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = colorBlindPalette)
AKData <- subset(newGenerations, newGenerations$STATE == "AK" & newGenerations$ENERGY.SOURCE != "Total")
ggplot(AKData,
aes(x=YEAR, y=GENERATION..Megawatthours.,fill=ENERGY.SOURCE)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = colorBlindPalette)
ggplot(AKData,
aes(x=YEAR, y=GENERATION..Megawatthours.,fill=ENERGY.SOURCE)) +
geom_bar(position="fill", stat="identity")
ggplot(AKData,
aes(x=YEAR, y=GENERATION..Megawatthours.,fill=ENERGY.SOURCE)) +
geom_bar(position="fill", stat="identity") +
scale_fill_manual(values = colorBlindPalette)
runApp()
